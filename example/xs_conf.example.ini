;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; This is the configuration file required by XookSuut.
; 
; Some variables are deactivated by default.
; To activate a variable remove the starting semicolon and proceed to edit it.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Some general configurations prior the fitting
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[general]

; If you analyse multiple objects from the same dataset (i.e., CALIFA, MaNGA, MUSE,
; SAMI, etc)  you can specify it here.   
;dataset = -

; where the models will be stored
;output_directory = ./

; This is just a proxy of the error (in km/s) in the emission line centroid. Its
; value does not affect the fitting, only the final chisquare value. (type float)
e_centroid = 0

; If you want to remove isolated pixels. (type boolean)
smooth = True

; v_center (in km/s) defines the velocity of the circular component v_t at the
; kinematic centre (i.e.,  v0 at r0 = 0). it can take a float value, although it
; is usually asummed that the kinematic centre does not rotate (i.e., v_center = 0).
; v_center can also be estimated by extrapolatig the first two pair of velocities
; (r1,v1) and (r2,v2) to (r0=0,v0). In such a case set ´v_center = extrapolate´.
; v_center is never estimated in a LeastSquare sence, it adopts the value passed
; by the user.
; 	Note 1: If v_center is set to a float number different than zero, this will
;	only apply for the circular model. 
; 	Note 2: If v_center is not zero (i.e., ´v_center = extrapolate´, or a float
;	number), this apply for all models. 
v_center = 0

; In case the velocity map is strongly contaminated by outliers then set ´outliers = True´.
; This will modify the loss function to z=log(res+1) i.e. the Cauchy function; with
; res = (model-obs). The default loss function is z = res. 
outliers = False


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; MCMCM analysis configuration.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[mcmc]
; The mcmc analysis makes use of the ensamble methods emcee (Foreman-Mackey+2013)
; and zeus (Karamanis+2021,2022). emcee is suitable for low dimension models,
; while zeus converges faster in high dimensions. acceptance fraction between
; 0.15-0.30 are expected for the large number of variables; if zeus is used the 
; acceptance rate = 1 by definition. Aditionally XS is optimized to implement Dynamic
; Nested sampling using  the ´dynesty´ package from Speagle 2020 and Koposov +2022.
; Unlike emcee or zeus which samples from the Posterior distribution, Dynesty is 
; designed to compute the evidence based on the volume occupied by the priors.

; If you want to perform the Markov Chain Monte Carlo analysis then set, ´mcmc_ana = True´. (type boolean) 
mcmc_ana = False

; Proposal distributions: ´G´ stands for Gausian and ´C´ for Cauchy. Use Cauchy
; if the data contains lots of outliers.
PropDist = G

;Wheter the intrinsec scatter is estimated. (type boolean)
sigma_int = True

; Choose between MCMC or Nested sampling algorithms. ´emcee´ from Dan Foreman-Mackey,
; ´zeus´ from Minas~Karamanis, or ´dynesty´ from  Speagle 2020 and Koposov +2022.
mcmc_sampler = emcee
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Default configurations for dynesty:
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;dlogz_init = 0.1
maxiter = 75000
maxbatch = 1
;nlive = 500
;sample = rwalk
;bound = multi
; select the type of priors: 1 for Gaussian , 0 for Uniform.
priors = 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Default configurations for emcee & zeus:
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Number of steps/iterations. (type int)
Nsteps = 1000
; Keep values every ´thin´-steps from the chain. (type int)
thin = 1
; The number of steps to discard from the chain.
; 	Note: If 0.0 < burnin < 1.0, it will be considered as
; 	the fraction of the chain to be discarded, i.e 0.1 = 10%. 
; 	The final number of steps in the chain will be then, steps = Nsteps - burnin
burnin = 0.333
; Number of walkers. (type int)
; 	Note: You dont know a priori the number of walkers you need since it depends
;	on the number of variables
; 	to estimate from the model. XookSuut calculates automatically the number of
;	walkers (i.e., Nwalvers=2Nvars).
; 	Be aware that the major number of variables , larger the computation time.
;Nwalkers = False

; If you have installed the python multiprocessing module, you can paralelize this
; task !. (type boolean)
; 	Note: dynesty only runs in parallel.
parallelize = True

; Number of CPUs in parallel mode. By default XS uses the number of available CPUs-1.
; Change Ncpus value if you want to use another CPUs. (type int)
;Ncpus = False

; If you want to use the values obtained from the marginal distribution of the parameters;
; otherwise it will use those obtained from the LeastSquare analysis. (type boolean)
use_mcmc_vals = True

; If you want to save the chain in a fits file (type boolean). The chain dimensions
; is (nsteps, nwalkers, ndim).
;save_chain = False
; A plot showing the chain progress, i.e., steps vs. v_k. (type boolean)
plot_chain = True

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Bootrap analysis configuration
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[bootstrap]
; If you want to estimate errors on parameters via bootstrap then set ´boots_ana = True´. (type boolean)
boots_ana = False
; Number of bootstraps. (type int)
Nboots = 10
; Wheter the mean values from the bootstrap analysis are used as best-fit values,
; otherwise the LeastSquares results will be used. (type boolean)
use_bootstrap = True
; Wheter this task is performed in parallel. (type boolean)
parallelize = True



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Configuration of constant parameters
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; If you want to constrain and have more control on the fitting parameters, then
; you can change the inputs as desired. Most of the time this is not required !
; units: PA (deg), INC (deg), X0 (pixel), Y0 (pixel), PHI_BAR (deg), VSYS (km/s)

[constant_params]

;FIT_PA = True
;PA = 50
;MIN_PA = 0
;MAX_PA = 360

;FIT_INC = True
;INC = 50
;MIN_INC = 25
;MAX_INC = 80

;FIT_X0 = True
;X0 = 0
;MIN_X0 = 0
;MAX_X0 = NX

;FIT_Y0 = True
;Y0 = 0
;MIN_Y0 = 0
;MAX_Y0 = NY

;FIT_PHI_BAR = True
;PHI_BAR = 45
;MIN_PHI_B = 0
;MAX_PHI_B = 180

;FIT_VSYS = True
;VSYS = 0
;MIN_VSYS = 0
;MAX_VSYS = 300000


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Convolve models
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; If you want to convolve the kinematic models at each iteration during the MCMC
; analysis then set ´convolve_mdls = True´. (type boolean).
;	NOTE: This action can considerably encrease the overall fitting process.
;		  It should be avoided its use in images with large dimensions.
; If PSF[''] ~ pixel_size[''] then avoid convolving the models.

[convolve]
; wheter convolve or not the models at each iteration.  (type boolean).
convolve_mdls = False
; A symmetrical gaussian kernel is assumed. FWHM must be in arcseconds.	 (type float)
psf_fwhm = 2.5

